*/
 Código responsável por receber um vetor [K,r1,r2,r3...], gerar uma matriz com K linhas e duas colunas. O
 objetivo é checar a quantidade de combinações possíveis entre os elementos e retornar este valor.
  Os próximos termos (r1,r2,r3...) são elementos que não podem ser considerados no resultado das combinações
  possíveis.
/*


function MinWindowSubstring(strArr) { 

var numMesas = strArr[0];
var mesasOcupadas = strArr.splice(1,strArr.length);
var matriz = [];
var caminhoCerto = 0;
var semCaminho = [];
var posicaoI = [];
var posicaoJ = [];
var inc = 0;
var inc2 = 0;
var totalCaminhosInexistentes = 0;
var resultado = 0;


for(j = 1; j <= numMesas/2; j++) {
  var linhas = [];
  for(i = 1; i < 3;i++) {
  linhas[i-1] = i+j-1;
  
  }
  linhas[0] +=  (j-1);
  linhas[1] +=  (j-1);

  matriz[j-1] = linhas;
}

console.log(mesasOcupadas)

if(matriz.length * 2 <= 4 ) {
  caminhoCerto = matriz.length*2;
} 

else {

  for(i = 0; i < matriz.length; i++) {
  for(j = 0; j < 2; j++) {
        caminhoCerto++;

      }
      
      
      
    }

    caminhoCerto = caminhoCerto + (matriz.length - 2);

}

if(matriz.length * 2 <= 4 ) {

  for(i = 0; i < matriz.length; i++) {
    for(j = 0; j < 2; j++) {
      for(k=0; k  < mesasOcupadas.length; k++) {
        
        if(mesasOcupadas[k] == matriz[i][j]) {
          console.log('ok');
          posicaoI[inc] = i;
          posicaoJ[inc] = j;
          inc++;
        }
      }

    }
      
      
      
  }
  for(i = 0; i < posicaoI.length; i++) {

    if(posicaoI[i] == posicaoI[i+1] || posicaoJ[i] == posicaoJ[i+1]) {
      semCaminho =-3;

  
    }else if(mesasOcupadas.length == 1) {
      semCaminho =- 2;
    }
    else if(mesasOcupadas.length > 2) {
      semCaminho =- 4;
    }
    else {

      if(posicaoI[i] == 0 && posicaoJ[i] == 0)  {
      if(posicaoI[i+1] == matriz.length-1 && posicaoJ[i+1] == matriz.length-1)  {
        semCaminho =- 4;
      }
    } else if(posicaoI[i+1] == matriz.length-1 && posicaoJ[i] == matriz.length-1) {
      if(posicaoI[i] == 0 && posicaoJ[i] == 1)  {
        semCaminho =- 4;
      } 
    }
    }
    console.log(posicaoI[i]+","+posicaoJ[i]);
    
  }

} 

else {
  inc = 0;

  for(i = 0; i < matriz.length; i++) {
  for(j = 0; j < 2; j++) {
     for(k=0; k  < mesasOcupadas.length; k++) {
        
        if(mesasOcupadas[k] == matriz[i][j]) {
          console.log('ok');
          posicaoI[inc] = i;
          posicaoJ[inc] = j;
          inc++;
        }
      }
    

      } 
    }


if(mesasOcupadas.length > 1) {
    for(i = 0; i < posicaoI.length; i++) {
     

    if((posicaoI[i] == posicaoI[i+1])) {
      if(posicaoI[i] == matriz.length-1) {
        semCaminho[inc2] =-3;
      
      }
    }else if(posicaoJ[i] == posicaoJ[i+1]) {
     if(posicaoJ[i+1] == matriz.length-1) {
        semCaminho[inc2] =-3;
      }else {
        semCaminho[inc2] = -3;
      }
    } else {
        console.log("Entrou aqui!")
        if(posicaoI[i] != posicaoI[i-1]) {
          if(posicaoI[i] == 0 || posicaoI[i] == matriz.length-1) {
          semCaminho[inc2] = -3;
        } else {
          semCaminho[inc2] = -3;
        }

      }   
    }

inc2++;
}

  
}

else {
  inc2 = 0;
  for(i = 0; i < posicaoI.length; i++) {

    if((posicaoI[i] == 0) || (posicaoI[i] == matriz.length-1)) {
      semCaminho[inc2] = -2;
    } else {
      semCaminho[inc2] = -3;
    }
  }

}
 



    console.log("Caminhos ligados: " + caminhoCerto);
    console.log("Subtração de caminhos inexistentes: " + semCaminho);
    totalCaminhosInexistentes =  semCaminho.reduce(function(totalCaminhosInexistentes, semCaminho) {
      return totalCaminhosInexistentes + semCaminho;
    },0);
    console.log(totalCaminhosInexistentes);
    resultado = parseInt(caminhoCerto) + parseInt(totalCaminhosInexistentes);
    console.log("Resultado: " + resultado);

 
}
   
    return resultado; 
}


 

  


// keep this function call here 
console.log(MinWindowSubstring(readline()));
